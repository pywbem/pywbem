#
# PyLint configuration file for PyWBEM project
#
# Generated by pylint 1.5.4.
#


[MASTER]

# Specify a configuration file.
#rcfile=

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
#init-hook=

# Add files or directories to the blacklist. They should be base names, not
# paths.
ignore=.svn,.git

# Pickle collected data for later comparisons.
persistent=yes

# List of plugins (as comma separated values of python modules names) to load,
# usually to register additional checkers.
load-plugins=

# Use multiple processes to speed up Pylint.
jobs=4

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
unsafe-load-any-extension=no

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code
extension-pkg-whitelist=

# Allow optimization of some AST trees. This will activate a peephole AST
# optimizer, which will apply various small optimizations. For instance, it can
# be used to obtain the result of joining multiple strings with the addition
# operator. Joining a lot of strings can lead to a maximum recursion error in
# Pylint and this flag can prevent that. It has one side effect, the resulting
# AST will be different than the one from reality.
optimize-ast=no


[MESSAGES CONTROL]

# Only show warnings with the listed confidence levels. Leave empty to show
# all. Valid levels: HIGH, INFERENCE, INFERENCE_FAILURE, UNDEFINED
confidence=

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time. See also the "--disable" option for examples.
#enable=

# Disable the message, report, category or checker with the given id(s). You
# can either give multiple identifiers separated by comma (,) or put this
# option multiple times (only on the command line, not in the configuration
# file where it should appear only once).You can also use "--disable=all" to
# disable everything first and then reenable specific checks. For example, if
# you want to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use"--disable=all --enable=classes
# --disable=W"
disable=I0011,
        too-many-locals, too-many-branches, too-many-statements,
        too-many-lines, too-many-public-methods,
        too-many-nested-blocks, too-many-return-statements, too-many-arguments,
        wildcard-import, unused-wildcard-import,
        locally-enabled, superfluous-parens, useless-object-inheritance,
        consider-using-set-comprehension, unnecessary-pass, useless-return

# Note: "useless-object-inheritance" is python 3 only. In Python 2,
#        "new-style" objects must inherit from object, or else
#        they will be "old-style". In Python 3, this distinction does not
#        exist; all objects inherit from object, and so explicitly inheriting
#        from it is useless.  Ignore as long as we are using pytnon 2.7

# Note:  "unnecessary-pass" appears to be a completely harmless issue. We will
#         ignore this warning at least for now.

# Note:  "useless-return" this only appears in Python 3 and since the return
#        serves as a clear signal of the end of the method and does not cause
#        any code issues we will ignore this warning.

# Note: "consider-using-set-comprehension" not allowed in python 2.6 so we
#       ignore it as long as we are using 2.7

# Note: The too-many-* messages are excluded temporarily, and should be dealt
#       with at some point.

# Note: wildcard related messages are excluded because the original external
#       interface uses wildcard imports and we cannot change that without
#       breaking compatibility. We could move the message control statements
#       into the source code, though.

# Note: messages are described here: https://pylint-messages.wikidot.com/all-messages


[REPORTS]

# Set the output format. Available formats are text, parseable, colorized, msvs
# (visual studio) and html. You can also give a reporter class, eg
# mypackage.mymodule.MyReporterClass.
output-format=text

# Put messages in a separate file for each module / package specified on the
# command line instead of printing them on stdout. Reports (if any) will be
# written in a file name "pylint_global.[txt|html]".
files-output=no

# Tells whether to display a full report or only the messages
reports=yes

# Python expression which should return a note less than 10 (10 is the highest
# note). You have access to the variables errors warning, statement which
# respectively contain the number of errors / warnings messages and the total
# number of statements analyzed. This is used by the global evaluation report
# (RP0004).
evaluation=10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10)

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details:
# https://docs.pylint.org/output.html#reports-section
# Note: This format only affects output format text, but not html.
# Note: The vim quickfix support by default recognizes the following format:
#   {path}:{line}: ...
#   {path}:{line}: {msg_id} {obj}: {msg}
# Note: Eclipse needs the following format:
#   {C}:{line:3d},{column:2d}: {msg} ({symbol})
# However, some messages show the source code in additional lines, as
# part of the {msg} field, and this causes Eclipse by mistake to suppress
# the entire message. So for now, we omit the {msg} field, for Eclipse:
#   '{C}:{line:3d},{column:2d}: ({symbol})'
# Note: The default format is:
#   {C}:{line:3d},{column:2d}: {msg} ({symbol})
# Note: Usage with geany editor
#   use output-format=parseable
#   No special message format.
#msg-template='{C}:{line:3d},{column:2d}: {msg} ({symbol})'


[VARIABLES]

# Tells whether we should check for unused import in __init__ files.
init-import=no

# A regular expression matching the name of dummy variables (i.e. expectedly
# not used).
dummy-variables-rgx=_$|dummy_|unused_

# List of additional names supposed to be defined in builtins. Remember that
# you should avoid to define new builtins when possible.
additional-builtins=

# List of strings which can identify a callback function by name. A callback
# name must start or end with one of those strings.
callbacks=cb_,_cb


[BASIC]

# List of builtins function names that should not be used, separated by a comma
bad-functions=map,filter,apply,input

# Good variable names which should always be accepted, separated by a comma
# TODO KS: Move i,... to local var and inline var; move _ to arg and local var and inline var.
good-names=_,f,i,j,k,m,n,__all__,__name__,__version__

# Bad variable names which should always be refused, separated by a comma
bad-names=foo,bar,baz,toto,tutu,tata,l,O,I

# Colon-delimited sets of names that determine each other's naming style when
# the name regexes allow several styles.
name-group=

# Include a hint for the correct naming format with invalid-name
include-naming-hint=no

# Regular expression matching correct function names.
#
# The expression below allows "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy as well as
# double trailing underscores are allowed.
# Names matching this expression are compatible with PEP-8.
function-rgx=_{0,2}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})(__){0,1}$
# TODO AM: Verify whether two leading underscores are allowed / supported with name mangling.

# Naming hint for function names
function-name-hint=_{0,2}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})(__){0,1}$

# Regular expression matching correct variable names.
#
# The expression below allows "UPPER_CASE_WITH_UNDERSCORES" for constants,
# and "lower_case_with_underscores" and "mixedCaseWithoutUnderscores" for
# other variables; one leading underscore is allowed, and one trailing
# underscore is allowed to avoid conflists with built-in names.
# Names matching this expression are compatible with PEP-8.
variable-rgx=_{0,1}([A-Z]([A-Z0-9_]{0,38}[A-Z0-9])?|[a-z]([a-z0-9_]{0,38}[a-z0-9])?|[a-z]([a-zA-Z0-9_]{1,39})?)_{0,1}$

# Naming hint for variable names
variable-name-hint=_{0,1}([A-Z]([A-Z0-9_]{0,38}[A-Z0-9])?|[a-z]([a-z0-9_]{0,38}[a-z0-9])?|[a-z]([a-zA-Z0-9_]{1,39})?)_{0,1}$

# Regular expression matching correct constant names.
#
# The expression below allows "UPPER_CASE_WITH_UNDERSCORES"; leading underscores
# for privacy are allowed.
# Names matching this expression are compatible with PEP-8.
const-rgx=(_{0,1}[A-Z][A-Z0-9_]{0,38}[A-Z0-9]|(__.*__))$

# Naming hint for constant names
const-name-hint=(_{0,1}[A-Z][A-Z0-9_]{0,38}[A-Z0-9]|(__.*__))$

# Regular expression matching correct attribute names.
#
# The expression below allows "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy are allowed.
# Names matching this expression are compatible with PEP-8.
attr-rgx=_{0,2}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})$

# Naming hint for attribute names
attr-name-hint=_{0,2}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})$

# Regular expression matching correct argument names.
#
# The expression below allows "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores are NOT allowed,
# but one trailing underscore is allowed to avoid conflists with built-in
# names.
# Names matching this expression are compatible with PEP-8.
argument-rgx=([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})_{0,1}$

# Naming hint for argument names
argument-name-hint=([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})_{0,1}$

# Regular expression matching correct class attribute names.
#
# The expression below allows "UPPER_CASE_WITH_UNDERSCORES" for constants,
# and "lower_case_with_underscores" and "mixedCaseWithoutUnderscores" for
# other variables; leading underscores for privacy are allowed.
# Names matching this expression are compatible with PEP-8.
class-attribute-rgx=_{0,2}([A-Z][A-Z0-9_]{0,38}[A-Z0-9]|[a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{0,39}|(__.*__))$

# Naming hint for class attribute names
class-attribute-name-hint=_{0,2}([A-Z][A-Z0-9_]{0,38}[A-Z0-9]|[a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{0,39}|(__.*__))$

# Regular expression matching correct inline iteration names.
#
# The expression below allows "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy are allowed.
inlinevar-rgx=_{0,1}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{0,39})$

# Naming hint for inline iteration names
inlinevar-name-hint=_{0,1}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{0,39})$

# Regular expression matching correct class names.
#
# The expression below allows "CamelCaseWithoutUnderscores"; leading underscores
# for privacy are allowed.
# Names matching this expression are compatible with PEP-8, but PEP-8 also
# allows that class names for callable classes can use function name syntax.
# This is not reflected in this regexp; callable classes that follow that
# convention should disable PyLint message C0103.
class-rgx=_{0,1}[A-Z][a-zA-Z0-9_]{1,39}$

# Naming hint for class names
class-name-hint=_{0,1}[A-Z][a-zA-Z0-9_]{1,39}$

# Regular expression matching correct module names.
#
# The expression below allows "lower_case_with_underscores"; leading underscores
# for privacy as well as double trailing underscores are allowed.
# Names matching this expression are compatible with PEP-8.
module-rgx=_{0,2}[a-z][a-z0-9_]{0,28}[a-z0-9](__){0,1}$

# Naming hint for module names
module-name-hint=_{0,2}[a-z][a-z0-9_]{0,28}[a-z0-9](__){0,1}$

# Regular expression matching correct method names.
#
# The expression below allows "lower_case_with_underscores" and
# "mixedCaseWithoutUnderscores"; leading underscores for privacy as well as
# double trailing underscores are allowed.
# Names matching this expression are compatible with PEP-8.
method-rgx=_{0,2}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})(__){0,1}$

# Naming hint for method names
method-name-hint=_{0,2}([a-z][a-z0-9_]{0,38}[a-z0-9]|[a-z][a-zA-Z0-9_]{1,39})(__){0,1}$

# Regular expression which should only match function or class names that do
# not require a docstring.
no-docstring-rgx=__.*__

# Minimum line length for functions/classes that require docstrings, shorter
# ones are exempt.
docstring-min-length=-1


[ELIF]

# Maximum number of nested blocks for function / method body
max-nested-blocks=5


[TYPECHECK]

# Tells whether missing members accessed in mixin class should be ignored. A
# mixin class is detected if its name ends with "mixin" (case insensitive).
ignore-mixin-members=yes

# List of module names for which member attributes should not be checked
# (useful for modules/projects where namespaces are manipulated during runtime
# and thus existing member attributes cannot be deduced by static analysis. It
# supports qualified module names, as well as Unix pattern matching.
#
# Modules that create modules at run time cauase pylint to raise
# "no-name-in-module" and/or "import-error". Such modules can be put
# on the module ignore list. For details, see
# https://bitbucket.org/logilab/pylint/issues/223/ignored-modules-should-turn-no-name-in
ignored-modules=distutils,six,builtins,urllib,
                lxml,lxml.etree,
                ssl,M2Crypto,M2Crypto.SSL,

# List of classes names for which member attributes should not be checked
# (useful for classes with attributes dynamically set). This supports can work
# with qualified names.
ignored-classes=SQLObject

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
generated-members=REQUEST,acl_users,aq_parent


[SPELLING]

# Spelling dictionary name. Available dictionaries: none. To make it working
# install python-enchant package.
spelling-dict=

# List of comma separated words that should not be checked.
spelling-ignore-words=

# A path to a file that contains private dictionary; one word per line.
spelling-private-dict-file=

# Tells whether to store unknown words to indicated private dictionary in
# --spelling-private-dict-file option instead of raising a message.
spelling-store-unknown-words=no


[LOGGING]

# Logging modules to check that the string format arguments are in logging
# function parameter format
logging-modules=logging


[SIMILARITIES]

# Minimum lines number of a similarity.
min-similarity-lines=8

# Ignore comments when computing similarities.
ignore-comments=yes

# Ignore docstrings when computing similarities.
ignore-docstrings=yes

# Ignore imports when computing similarities.
ignore-imports=no


[FORMAT]

# Maximum number of characters on a single line.
max-line-length=80

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines=^\s*(# )?<?https?://\S+>?$

# Allow the body of an if to be on the same line as the test if there is no
# else.
single-line-if-stmt=no

# List of optional constructs for which whitespace checking is disabled. `dict-
# separator` is used to allow tabulation in dicts, etc.: {1  : 1,\n222: 2}.
# `trailing-comma` allows a space between comma and closing bracket: (a, ).
# `empty-line` allows space-only lines.
no-space-check=trailing-comma,dict-separator

# Maximum number of lines in a module
max-module-lines=1000

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string='    '

# Number of spaces of indent required inside a hanging  or continued line.
indent-after-paren=4

# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
expected-line-ending-format=


[MISCELLANEOUS]

# List of note tags to take in consideration, separated by a comma.
notes=FIXME,XXX,TODO


[CLASSES]

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods=__init__,__new__,setUp

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg=cls

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg=mcs

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected=_asdict,_fields,_replace,_source,_make


[DESIGN]

# Maximum number of arguments for function / method
max-args=8

# Argument names that match this expression will be ignored. Default to name
# with leading underscore
ignored-argument-names=_.*

# Maximum number of locals for function / method body
max-locals=20

# Maximum number of return / yield for function / method body
max-returns=6

# Maximum number of branch for function / method body
max-branches=15

# Maximum number of statements in function / method body
# TODO AM: What counts as a statement?
max-statements=50

# Maximum number of parents for a class (see R0901).
max-parents=7

# Maximum number of attributes for a class (see R0902).
# TODO AM: Are these just variables, without methods? class & instance? including private? including inherited?
max-attributes=15

# Minimum number of public methods for a class (see R0903).
# TODO AM: including inherited?
min-public-methods=2

# Maximum number of public methods for a class (see R0904).
max-public-methods=20

# Maximum number of boolean expressions in a if statement
max-bool-expr=5


[IMPORTS]

# Deprecated modules which should not be used, separated by a comma
deprecated-modules=regsub,TERMIOS,Bastion,rexec

# Create a graph of every (i.e. internal and external) dependencies in the
# given file (report RP0402 must not be disabled)
import-graph=

# Create a graph of external dependencies in the given file (report RP0402 must
# not be disabled)
ext-import-graph=

# Create a graph of internal dependencies in the given file (report RP0402 must
# not be disabled)
int-import-graph=


[EXCEPTIONS]

# Exceptions that will emit a warning when being caught. Defaults to
# "Exception"
overgeneral-exceptions=Exception
