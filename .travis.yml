# Control file for Travis CI (https://travis-ci.org)
# Must be located in the root directory of the Git repository.

# Commit depth that is checked out.
git:
  depth: 50

# By default, notification emails are sent to the PR creator and commiter.
notifications:
  email: false

sudo: required

# Disabling the distro, so we get the latest.
# Note that for Python 3.7 and higher, at least Ubuntu xenial is required,
# which is the default on Travis since 6/2019.
# dist:
#   - xenial

# We define the job matrix explicitly, in order to be able to minimize the
# combinations of runtime environments.
# For OS-X, using an explicit matrix is required anyway, because Travis at
# this point only has half-baked support for Python on OS-X that does
# not work. Also, on OS-X, it needs to be invoked with language=generic
# and an empty 'python' variable in order to prevent that Travis attempts
# to install Python.
matrix:
  include:

    - os: linux
      language: python
      python: "2.7"
      env:
        - PACKAGE_LEVEL=minimum

    - os: linux
      language: python
      python: "2.7"
      env:
        - PACKAGE_LEVEL=latest

#    - os: linux
#      language: python
#      python: "3.4"
#      env:
#        - PACKAGE_LEVEL=minimum

    - os: linux
      language: python
      python: "3.4"
      env:
        - PACKAGE_LEVEL=latest

#    - os: linux
#      language: python
#      python: "3.5"
#      env:
#        - PACKAGE_LEVEL=minimum

#    - os: linux
#      language: python
#      python: "3.5"
#      env:
#        - PACKAGE_LEVEL=latest

#    - os: linux
#      language: python
#      python: "3.6"
#      env:
#        - PACKAGE_LEVEL=minimum

#    - os: linux
#      language: python
#      python: "3.6"
#      env:
#        - PACKAGE_LEVEL=latest

#    - os: linux
#      language: python
#      python: "3.7"
#      env:
#        - PACKAGE_LEVEL=minimum

#    - os: linux
#      language: python
#      python: "3.7"
#      env:
#        - PACKAGE_LEVEL=latest

    - os: linux
      language: python
      python: "3.8"
      env:
        - PACKAGE_LEVEL=minimum

    - os: linux
      language: python
      python: "3.8"
      env:
        - PACKAGE_LEVEL=latest

#    - os: linux
#      language: python
#      python: "pypy"  # currently Python 2.7.13, PyPy 7.1.1
#      env:
#        - PACKAGE_LEVEL=minimum

#    - os: linux
#      language: python
#      python: "pypy"  # currently Python 2.7.13, PyPy 7.1.1
#      env:
#        - PACKAGE_LEVEL=latest

# TODO: pypy3 disabled due to install error with typed-ast (from pylint)
#    - os: linux
#      language: python
#      python: "pypy3"  # currently Python 3.6.1, PyPy 7.1.1-beta0
#      env:
#        - PACKAGE_LEVEL=minimum

# TODO: pypy3 disabled due to install error with typed-ast (from pylint)
#    - os: linux
#      language: python
#      python: "pypy3"  # currently Python 3.6.1, PyPy 7.1.1-beta0
#      env:
#        - PACKAGE_LEVEL=latest

#    - os: osx
#      osx_image: xcode9.4  # macOS 10.13.6 with python2 @ 2.7.17
#      language: generic
#      python:
#      env:
#        - PYTHON=2
#        - PACKAGE_LEVEL=minimum

#    - os: osx
#      osx_image: xcode9.4  # macOS 10.13.6 with python2 @ 2.7.17
#      language: generic
#      python:
#      env:
#        - PYTHON=2
#        - PACKAGE_LEVEL=latest

#    - os: osx
#      osx_image: xcode12  # macOS 10.15.5 with python3 @ 3.7.7, upgraded to 3.8.3
#      language: generic
#      python:
#      env:
#        - PYTHON=3
#        - PACKAGE_LEVEL=minimum

#    - os: osx
#      osx_image: xcode12  # macOS 10.15.5 with python3 @ 3.7.7, upgraded to 3.8.3
#      language: generic
#      python:
#      env:
#        - PYTHON=3
#        - PACKAGE_LEVEL=latest

before_install:

  # Debug original Python versions on macOS
  - sh -c "which python; python --version"
  - sh -c "which python2; python2 --version"
  - sh -c "which python3; python3 --version"

  - git --version

  # The scheduled runs in Travis (for the "manual-ci-run-stable" and
  # "manual-ci-run" branches) are push runs, and they occur regularly even
  # when no push has happened. We still want these runs to run on the latest
  # level, so we manually rebase the checked out branch on the target branch
  # of the PRs for these branches. Since the PR context is not known in a push
  # run, we need to know its target branch. Finding that out automatically
  # ended up being too difficult, so we go with a manually updated env var
  # for now.

  - export STABLE_BRANCH=stable_1.1

  - echo TRAVIS_BRANCH=$TRAVIS_BRANCH
  - echo TRAVIS_PULL_REQUEST_BRANCH=$TRAVIS_PULL_REQUEST_BRANCH

  # Push run for branch manual-ci-run-stable:
  - if [[ "$TRAVIS_BRANCH" == "manual-ci-run-stable" && -n $STABLE_BRANCH ]]; then
      echo Rebasing to $STABLE_BRANCH;
      git fetch origin $STABLE_BRANCH;
      git branch $STABLE_BRANCH FETCH_HEAD;
      git rebase $STABLE_BRANCH;
    fi

  # Push run for branch manual-ci-run:
  - if [[ "$TRAVIS_BRANCH" == "manual-ci-run" ]]; then
      echo Rebasing to master;
      git fetch origin master;
      git branch master FETCH_HEAD;
      git rebase master;
    fi

  - git log HEAD~~~~..HEAD --oneline --decorate

  - if [[ "$TRAVIS_BRANCH" == "manual-ci-run-stable" || "$TRAVIS_PULL_REQUEST_BRANCH" == "manual-ci-run-stable" ]]; then
      export _MANUAL_CI_RUN=true;
    fi
  - if [[ "$TRAVIS_BRANCH" == "manual-ci-run" || "$TRAVIS_PULL_REQUEST_BRANCH" == "manual-ci-run" ]]; then
      export _MANUAL_CI_RUN=true;
    fi
  - echo _MANUAL_CI_RUN=$_MANUAL_CI_RUN

# commands to install dependencies
install:
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      if [[ "${PYTHON:0:1}" == "2" ]]; then
        export PYTHON_CMD=python2;
        export PIP_CMD=pip2;
      else
        export PYTHON_CMD=python3;
        export PIP_CMD=pip3;
      fi;
    else
      export PYTHON_CMD=python;
      export PIP_CMD=pip;
    fi;
    echo "PYTHON_CMD=$PYTHON_CMD";
    echo "PIP_CMD=$PIP_CMD"
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      if [[ "${PYTHON:0:1}" == "2" ]]; then
        OSX_PYTHON_PKG=python@2;
      else
        OSX_PYTHON_PKG=python@3;
      fi;
      echo "OSX_PYTHON_PKG=$OSX_PYTHON_PKG";
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      echo "travis.yml Updating package metadata";
      brew update;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      echo "travis.yml Installing/upgrading Python";
      brew ls --versions $OSX_PYTHON_PKG;
      rc=$?;
      if [[ $rc == 0 ]]; then
        echo "Upgrading $OSX_PYTHON_PKG";
        brew upgrade $OSX_PYTHON_PKG;
      else
        echo "Installing $OSX_PYTHON_PKG";
        brew install $OSX_PYTHON_PKG;
      fi;
      echo "Unlinking $OSX_PYTHON_PKG";
      brew unlink $OSX_PYTHON_PKG;
      echo "Linking $OSX_PYTHON_PKG";
      brew link --overwrite $OSX_PYTHON_PKG;
      $PIP_CMD install --upgrade pip setuptools;
      echo "Checking Python and Pip";
      which $PYTHON_CMD && which $PIP_CMD;
    fi
  - if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then
      echo "travis.yml Installing Python virtualenv";
      $PIP_CMD install virtualenv;
      virtualenv $HOME/venv -p $PYTHON_CMD && source $HOME/venv/bin/activate;
    fi
  - env |sort
  - pip list
  - make platform env
  - make install
  - pip list
  - make develop
  - pip list

# commands to run builds & tests
script:
  - make build
  - make builddoc
  - make check
  - make pylint
  # TODO(nocasedict): Re-enable once nocasedict has been released
  # - make installtest
  - make test
  - if [[ "$TRAVIS_PYTHON_VERSION" != "pypy" ]]; then make leaktest; fi
  - make resourcetest

after_success:
# Note: In case of error 422 (Couldn't find a repository matching this job),
#       log on to https://coveralls.io to refresh the OAuth token, and
#       make sure this project is enabled there.
  - if [[ "$TRAVIS_OS_NAME" == "linux" && "$PACKAGE_LEVEL" == "latest" && -z $_MANUAL_CI_RUN ]]; then
      coveralls;
    fi
