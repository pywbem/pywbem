
environment:
  matrix:
#------------------------
# Python 2.6 is not supported by M2Crypto on Windows (nor by the earlier used
# M2CryptoWin32/Win64; its __m2crypto.pyd file depends on python27.dll).
#------------------------

    - PYTHON_VERSION: 2.7
      PYTHON_ARCH: 32
      PYTHON_HOME: C:\Python27
      UNIX_PATH: none

#    - PYTHON_VERSION: 2.7
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python27
#      UNIX_PATH: C:\cygwin\bin

#    - PYTHON_VERSION: 2.7
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python27-x64
#      UNIX_PATH: none

#    - PYTHON_VERSION: 2.7
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python27-x64
#      UNIX_PATH: C:\cygwin64\bin

    - PYTHON_VERSION: 2.7
      PYTHON_ARCH: 64
      PYTHON_HOME: C:\Python27-x64
      UNIX_PATH: C:\msys64\usr\bin

#    - PYTHON_VERSION: 3.4
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python34
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.4
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python34-x64
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.5
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python35
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.5
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python35-x64
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.6
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python36
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.6
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python36-x64
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.7
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python37
#      UNIX_PATH: none

#    - PYTHON_VERSION: 3.7
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python37
#      UNIX_PATH: C:\cygwin\bin

#    - PYTHON_VERSION: 3.7
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python37-x64
#      UNIX_PATH: none

    - PYTHON_VERSION: 3.7
      PYTHON_ARCH: 64
      PYTHON_HOME: C:\Python37-x64
      UNIX_PATH: C:\cygwin64\bin

#    - PYTHON_VERSION: 3.7
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python37-x64
#      UNIX_PATH: C:\msys64\usr\bin

configuration:
# These values will become the values of the PACKAGE_LEVEL env.var.
#  - minimum
  - latest

install:

  # Examine Windows version and current directory
  - ver
  - cd

  # Examine the initial environment
  - set

  - git --version
  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set _NEED_REBASE=true
  # This Git version requires user configuration in rebase step
  - if %_NEED_REBASE%.==true. git config user.name "dummy"
  - if %_NEED_REBASE%.==true. git config user.email "dummy@dummy"
  - if %_NEED_REBASE%.==true. git fetch origin master
  - if %_NEED_REBASE%.==true. git branch master FETCH_HEAD
  - if %_NEED_REBASE%.==true. git rebase master
  - git branch -av

  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set _MANUAL_CI_RUN=true
  - if %APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH%.==manual-ci-run. set _MANUAL_CI_RUN=true

  # Set PACKAGE_LEVEL for make
  - set PACKAGE_LEVEL=%configuration%

  # Remove Python 2.7 from PATH.
  # Note that YAML interprets some characters in a special way (including '!' and '#')
  # so we have to use single quotes to protect some CMD commands from YAML.
  # Note that for some reason, "setlocal EnableDelayedExpansion" needs to be on the
  # same line as the command you want to execute under that setting. Using !abc! variable
  # expansion requires EnableDelayedExpansion.
  - 'set $line=%PATH%'
  - 'set $line=%$line: =#%'
  - 'set $line=%$line:;= %'
  - 'set $line=%$line:)=^^)%'
  - 'setlocal EnableDelayedExpansion & for %%a in (%$line%) do echo %%a | find /i "Python27" || set $newpath=!$newpath!;%%a'
  - 'set $newpath=%$newpath:#= %'
  - 'set $newpath=%$newpath:^^=%'
  - 'set PATH=%$newpath%'

  # Add UNIX path, if set in the build matrix
  # This must be after removal of Python 2.7 (because that uses the Windows
  # find and the UNIX env likely has the Unix find) and before adding Python
  # (because the UNIX env may also have a python).
  - 'if not "%UNIX_PATH%"=="none" set PATH=%UNIX_PATH%;%PATH%'

  # Add Python (includes Pip)
  - reg ADD HKCU\Software\Python\PythonCore\%PYTHON_VERSION%\InstallPath /ve /d "%PYTHON_HOME%" /t REG_SZ /f
  - reg ADD HKLM\Software\Python\PythonCore\%PYTHON_VERSION%\InstallPath /ve /d "%PYTHON_HOME%" /t REG_SZ /f
  - 'set PATH=%PYTHON_HOME%;%PYTHON_HOME%\Scripts;%PATH%'
  - where python
  - python --version
  - where pip
  - pip --version

  # Verify that Chocolatey is available
  - where choco
  - choco --version

  # Install GNU make if no UNIX env is set
  - if "%UNIX_PATH%"=="none" tools\retry choco install -y make
  - where make
  - make --version

  # Circumvention:
  # The installation in pywbem_os_setup.bat installs swig but without generating
  # the swig.exe shim file (using GenShim).
  # See GenShim issue https://github.com/chocolatey/shimgen/issues/43
  # Therefore, we install swig here in order to create the swig.exe shim file.
  # TODO: Remove the circumvention once it works in pywbem_os_setup.bat.
  #- choco install -y --allow-empty-checksums swig
  #- where swig
  #- swig -version

  # Examine the final environment
  - 'echo: %PATH%'
  - 'echo: %PYTHONPATH%'
  - 'echo: %INCLUDE%'
  - 'echo: %LIB%'
  - 'echo: %SWIG_FEATURES%'

  # Verify that the commands used in pywbem_os_setup.bat are available
  # Already verified further up: choco, pip, python.
  - where chmod
  - chmod --version
  - where tar
  - tar --version

  # Install Python virtualenv and OS commands
  #
  # Note: Installing Swig in pywbem_os_setup.bat does not work when it runs
  # inside of make which runs inside of tox, because it does not generate the
  # swig.exe shim file (using GenShim). See GenShim issue
  # https://github.com/chocolatey/shimgen/issues/43.
  # Therefore, we invoke pywbem_os_setup.bat outside of make.
  - pip install virtualenv
  - virtualenv myenv
  - myenv\Scripts\activate
  - where python
  - python --version
  - where pip
  - pip --version
  - call pywbem_os_setup.bat install
  - call pywbem_os_setup.bat develop

  # Verify that the commands used in makefile are available
  # Already verified further up: pip, python.

  # Verify that the commands used in the pywbem testsuite are available
  - where xmllint
  - xmllint --version

  # Install Python packages
  - make platform env
  - pip list
  - make install
  - pip list
  - make develop
  - pip list

# Not a C# project, build stuff at the test step instead.
build: false

before_test:

test_script:
  - make test
