
environment:
  matrix:
#------------------------
# Python 2.6 is not supported by M2Crypto on Windows (nor by the earlier used
# M2CryptoWin32/Win64; its __m2crypto.pyd file depends on python27.dll).
#------------------------
    - PYTHON_VERSION: 2.7
      PYTHON_ARCH: 32
      PYTHON_HOME: C:\Python27
    - PYTHON_VERSION: 2.7
      PYTHON_ARCH: 64
      PYTHON_HOME: C:\Python27-x64
#    - PYTHON_VERSION: 3.4
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python34
#    - PYTHON_VERSION: 3.4
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python34-x64
#    - PYTHON_VERSION: 3.5
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python35
#    - PYTHON_VERSION: 3.5
#      PYTHON_ARCH: 64
#      PYTHON_HOME: C:\Python35-x64
#    - PYTHON_VERSION: 3.6
#      PYTHON_ARCH: 32
#      PYTHON_HOME: C:\Python36
    - PYTHON_VERSION: 3.6
      PYTHON_ARCH: 64
      PYTHON_HOME: C:\Python36-x64

configuration:
# These values will become the values of the PACKAGE_LEVEL env.var.
#  - minimum
  - latest

install:

  # Examine Windows version and current directory
  - ver
  - cd

  # Examine the initial environment
  - set

  - git --version
  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set _NEED_REBASE=true
  # This Git version requires user configuration in rebase step
  - if %_NEED_REBASE%.==true. git config user.name "dummy"
  - if %_NEED_REBASE%.==true. git config user.email "dummy@dummy"
  - if %_NEED_REBASE%.==true. git fetch origin master
  - if %_NEED_REBASE%.==true. git branch master FETCH_HEAD
  - if %_NEED_REBASE%.==true. git rebase master
  - git branch -av

  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set _MANUAL_CI_RUN=true
  - if %APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH%.==manual-ci-run. set _MANUAL_CI_RUN=true

  # Set PACKAGE_LEVEL for make
  - set PACKAGE_LEVEL=%configuration%

  # Remove Python 2.7 from PATH.
  # Note that YAML interprets some characters in a special way (including '!' and '#')
  # so we have to use single quotes to protect some CMD commands from YAML.
  # Note that for some reason, "setlocal EnableDelayedExpansion" needs to be on the
  # same line as the command you want to execute under that setting. Using !abc! variable
  # expansion requires EnableDelayedExpansion.
  - 'set $line=%PATH%'
  - 'set $line=%$line: =#%'
  - 'set $line=%$line:;= %'
  - 'set $line=%$line:)=^^)%'
  - 'setlocal EnableDelayedExpansion & for %%a in (%$line%) do echo %%a | find /i "Python27" || set $newpath=!$newpath!;%%a'
  - 'set $newpath=%$newpath:#= %'
  - 'set $newpath=%$newpath:^^=%'
  - 'set PATH=%$newpath%'

  # Add CygWin
  # This must be after removal of Python 2.7 (because CygWin has the Unix find) and
  # before adding Python (because CygWin also has a python).
  - set PATH=C:\cygwin\bin;%PATH%

  # Add Python
  - reg ADD HKCU\Software\Python\PythonCore\%PYTHON_VERSION%\InstallPath /ve /d "%PYTHON_HOME%" /t REG_SZ /f
  - reg ADD HKLM\Software\Python\PythonCore\%PYTHON_VERSION%\InstallPath /ve /d "%PYTHON_HOME%" /t REG_SZ /f
  - set PATH=%PYTHON_HOME%;%PYTHON_HOME%\Scripts;%PATH%
  - where python
  - python --version

  ## Install InnoSetup - disabled because it is not needed
  #- choco install -y InnoSetup
  #- set PATH="C:\Program Files (x86)\Inno Setup 5";%PATH%

  ## Install pip - disabled because pip is already installed
  #- ps: (new-object System.Net.WebClient).Downloadfile('https://bootstrap.pypa.io/get-pip.py', 'C:\Users\appveyor\get-pip.py')
  #- ps: Start-Process -FilePath "C:\Python27\python.exe" -ArgumentList "C:\Users\appveyor\get-pip.py" -Wait -Passthru
  - where pip
  - pip --version

  # Verify that Chocolatey is available
  - where choco
  - choco --version

  # Circumvention:
  # The installation in pywbem_os_setup.bat installs swig but without generating
  # the swig.exe shim file (using GenShim).
  # See GenShim issue https://github.com/chocolatey/shimgen/issues/43
  # Therefore, we install swig here in order to create the swig.exe shim file.
  # TODO: Remove the circumvention once it works in pywbem_os_setup.bat.
  - choco install -r -y --allow-empty-checksums swig
  - where swig

  # Examine the final environment
  - 'echo "%PATH%"'
  - 'echo "%PYTHONPATH%"'
  - 'echo "%INCLUDE%"'
  - 'echo "%LIB%"'
  - 'echo "%SWIG_FEATURES%"'

  # Install tox
  - pip install tox==2.0.0
  - where tox
  - tox --version

  # Verify that the commands used in tox.ini are available
  # Already verified further up: tox, pip, python.
  - where make
  - make --version

  # Verify that the commands used in makefile are available
  # Already verified further up: pip, python.
  - where sh
  - sh --version
  - where bash
  - bash --version
  - where rm
  - rm --version
  - where mv
  - mv --version
  - where xargs
  - xargs --version
  - where grep
  - grep --version
  - where sed
  - sed --version
  - where tar
  - tar --version
  - where find
  - find --version

  # Verify that the commands used in pywbem_os_setup.bat are available
  - where curl
  - curl --version

  # Verify that the commands used in the pywbem testsuite are available
  - where xmllint
  - xmllint --version

# Not a C# project, build stuff at the test step instead.
build: false

before_test:

test_script:
  - tox -e pywin
