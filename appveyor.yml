
environment:
  matrix:

    - TOX_ENV: win64_py27_32
      UNIX_PATH: none
      PYTHON_CMD: python

#    - TOX_ENV: win64_py27_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

# Note: Python 3.4 is does not work on Windows because lxml does not install.
#       It fails with missing include files from libxml2 and libxslt, although
#       these packages are installed viy choco (and work with Python 3.5 and
#       higher). Even if the include file paths are added via INCLUDE, it fails
#       at the link step because libxslt.lib etc are needed but not part of
#       the choco installation of libxml2 etc.

#    - TOX_ENV: win64_py35_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py35_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py36_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py36_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py37_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py37_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py38_32
#      UNIX_PATH: none
#      PYTHON_CMD: python

#    - TOX_ENV: win64_py38_64
#      UNIX_PATH: none
#      PYTHON_CMD: python

# Note: On CygWin with Python 3.x, LC_ALL/LANG need to be set to utf-8 for Click to install/work

# Note: The 32-bit versions of CygWin do not work and have been removed from
# appveyor.yml and tox.ini:
# - Python 2.7 with cygwin 32-bit fails with "virtualenv is not compatible with
#   this system or executable".
# - On Python 3.6 and upwards, Tox returns success but does not do anything.

#    - TOX_ENV: cygwin64_py27
#      UNIX_PATH: C:\cygwin64\bin
#      PYTHON_CMD: python2.7
#      PIP_CMD: pip
#      CYGWIN_PYTHON_DEVEL: python27-devel

#    - TOX_ENV: cygwin64_py36
#      UNIX_PATH: C:\cygwin64\bin
#      PYTHON_CMD: python3.6
#      PIP_CMD: pip
#      CYGWIN_PYTHON_DEVEL: python36-devel
#      LC_ALL: C.UTF-8
#      LANG: C.UTF-8

#    - TOX_ENV: cygwin64_py37
#      UNIX_PATH: C:\cygwin64\bin
#      PYTHON_CMD: python3.7
#      PIP_CMD: pip
#      CYGWIN_PYTHON_DEVEL: python37-devel
#      LC_ALL: C.UTF-8
#      LANG: C.UTF-8

    - TOX_ENV: cygwin64_py38
      UNIX_PATH: C:\cygwin64\bin
      PYTHON_CMD: python3.8
      PIP_CMD: pip
      CYGWIN_PYTHON_DEVEL: python38-devel
      LC_ALL: C.UTF-8
      LANG: C.UTF-8

configuration:
# These values will become the values of the PACKAGE_LEVEL env.var.
#  - minimum
  - latest

install:

  # Examine the environment
  - ver
  - set
  - dir
  - dir C:\

  - git --version

  # Even though push runs are disabled in our Appveyor config, we manually
  # rebase the 'manual-ci-*' branches on the target branch of their PR, for
  # consistency with the Travis setup.

  - set STABLE_BRANCH=stable_0.17

  - echo APPVEYOR_REPO_BRANCH=%APPVEYOR_REPO_BRANCH%
  - echo APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH=%APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH%

  # Push run for branch manual-ci-run-stable:
  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run-stable. (
      echo Rebasing to %STABLE_BRANCH% &
      git fetch origin %STABLE_BRANCH% &
      git branch %STABLE_BRANCH% FETCH_HEAD &
      git rebase %STABLE_BRANCH% )

  # Push run for branch manual-ci-run:
  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. (
      echo Rebasing to master &
      git fetch origin master &
      git branch master FETCH_HEAD &
      git rebase master )

  - git log HEAD~~~~..HEAD --oneline --decorate

  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run-stable. set _MANUAL_CI_RUN=true
  - if %APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH%.==manual-ci-run-stable. set _MANUAL_CI_RUN=true
  - if %APPVEYOR_REPO_BRANCH%.==manual-ci-run. set _MANUAL_CI_RUN=true
  - if %APPVEYOR_PULL_REQUEST_HEAD_REPO_BRANCH%.==manual-ci-run. set _MANUAL_CI_RUN=true
  - echo _MANUAL_CI_RUN=%_MANUAL_CI_RUN%

  # Set PACKAGE_LEVEL for make
  - set PACKAGE_LEVEL=%configuration%
  - echo PACKAGE_LEVEL=%PACKAGE_LEVEL%

  # For UNIX, reduce the PATH to a minimum (to avoid blanks in directory names)
  - if not "%UNIX_PATH%"=="none" set PATH=C:\Windows\system32;C:\Windows;C:\ProgramData\chocolatey\bin

  # Add UNIX commands to the path (used for bash)
  - if not "%UNIX_PATH%"=="none" set PATH=%UNIX_PATH%;%PATH%

  # Set locale defaults for UNIX-like environments
  - if not "%UNIX_PATH%"=="none" set LANG=C.UTF-8
  - if not "%UNIX_PATH%"=="none" set LC_ALL=C.UTF-8

  # Verify that Chocolatey is available
  - where choco
  - choco --version

  # Install GNU make
  - if "%UNIX_PATH%"=="none" tools\retry choco install -y make
  - if "%UNIX_PATH%"=="none" where make
  - if "%UNIX_PATH%"=="none" make --version

  # Install Python 2.7 on CygWin
  # TODO: Verify whether python2 has again been installed by default
  - if not "%UNIX_PATH%"=="none" ( bash --noprofile --norc -c "which %PYTHON_CMD%; echo which %PYTHON_CMD% returns rc=\$?" )
  - 'if "%UNIX_PATH%"=="C:\cygwin\bin" ( C:\cygwin\setup-x86.exe -qnNdO -R C:/cygwin -P python2 )'
  - 'if "%UNIX_PATH%"=="C:\cygwin64\bin" ( C:\cygwin64\setup-x86_64.exe -qnNdO -R C:/cygwin64 -P python2 )'

  # Install Python development packages on CygWin
  - 'if "%UNIX_PATH%"=="C:\cygwin\bin" ( C:\cygwin\setup-x86.exe -qnNdO -R C:/cygwin -P %CYGWIN_PYTHON_DEVEL% )'
  - 'if "%UNIX_PATH%"=="C:\cygwin64\bin" ( C:\cygwin64\setup-x86_64.exe -qnNdO -R C:/cygwin64 -P %CYGWIN_PYTHON_DEVEL% )'

  # Verify that Python command is available, and fail if not
  - if "%UNIX_PATH%"=="none" ( where %PYTHON_CMD% )
  - if not "%UNIX_PATH%"=="none" ( bash --noprofile --norc -c "which %PYTHON_CMD%" )

  # Install Pip, where needed
  - if "%UNIX_PATH%"=="C:\cygwin\bin" ( bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m ensurepip; %PYTHON_CMD% -m pip install --upgrade pip setuptools wheel" )
  - if "%UNIX_PATH%"=="C:\cygwin64\bin" ( bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m ensurepip; %PYTHON_CMD% -m pip install --upgrade pip setuptools wheel" )

  # Install Tox
  - if "%UNIX_PATH%"=="none" ( cmd /c "pip install tox & where tox & tox --version" )
  - if "%UNIX_PATH%"=="C:\cygwin\bin" ( bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m pip install tox; which -a tox; tox --version" )
  - if "%UNIX_PATH%"=="C:\cygwin64\bin" ( bash --noprofile --norc -c "set -e; %PYTHON_CMD% -m pip install tox; which -a tox; tox --version" )

  # Initialize CygWin updates (must be done outside of CygWin bash in case it updates cygwin.dll)
  - 'if "%UNIX_PATH%"=="C:\cygwin\bin" ( C:\cygwin\setup-x86.exe --no-shortcuts --quiet-mode )'
  - 'if "%UNIX_PATH%"=="C:\cygwin64\bin" ( C:\cygwin64\setup-x86_64.exe --no-shortcuts --quiet-mode )'

  - # Mitigate issue https://github.com/pypa/virtualenv/issues/1962 by excluding virtualenv 20.0.32
  - 'if "%UNIX_PATH%"=="none" ( pip install virtualenv!=20.0.32 )'
  - 'if "%UNIX_PATH%"=="C:\cygwin\bin" ( bash -c "pip install virtualenv!=20.0.32" )'
  - 'if "%UNIX_PATH%"=="C:\cygwin64\bin" ( bash -c "pip install virtualenv!=20.0.32" )'

  # List Python packages in host environment of tox
  - 'if "%UNIX_PATH%"=="none" ( pip --version & pip list )'
  - 'if "%UNIX_PATH%"=="C:\cygwin\bin" ( bash -c "pip --version && pip list" )'
  - 'if "%UNIX_PATH%"=="C:\cygwin64\bin" ( bash -c "pip --version && pip list" )'

build: false

before_test:

test_script:
  - 'if "%UNIX_PATH%"=="none" ( where tox & tox -vv -e %TOX_ENV% & echo appveyor.yml: tox rc=%errorlevel% )'
  - 'if "%UNIX_PATH%"=="C:\cygwin\bin" ( bash -c "which tox && tox -vv -e %TOX_ENV% && echo appveyor.yml: tox rc=$?" )'
  - 'if "%UNIX_PATH%"=="C:\cygwin64\bin" ( bash -c "which tox && tox -vv -e %TOX_ENV% && echo appveyor.yml: tox rc=$?" )'
  - 'echo appveyor.yml: done'
